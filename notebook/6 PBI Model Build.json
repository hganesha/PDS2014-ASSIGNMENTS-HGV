{
	"name": "6 PBI Model Build",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Cell title\n"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"{\n",
					"  \"metadata\": {\n",
					"    \"saveOutput\": true,\n",
					"    \"language_info\": {\n",
					"      \"name\": \"python\"\n",
					"    }\n",
					"  },\n",
					"  \"nbformat\": 4,\n",
					"  \"nbformat_minor\": 2,\n",
					"  \"cells\": [\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"Copyright (c) Microsoft Corporation. \\n\",\n",
					"        \"Licensed under the MIT license. \\n\",\n",
					"        \"# Power BI Data Model\\n\",\n",
					"        \"\\n\",\n",
					"        \"Transform the cleaned dataset for reporting in Power BI, storing tables as CSV files in the Data Lake.\\n\",\n",
					"        \"\\n\",\n",
					"        \"The resulting data model includes four tables:\\n\",\n",
					"        \"\\n\",\n",
					"        \"1. Customer: user info, growth/no growth, & aggregated session metrics\\n\",\n",
					"        \"1. Activity: user clickstream activity, e.g. product views, purchases\\n\",\n",
					"        \"1. Products: reference table with additional product information\\n\",\n",
					"        \"1. Categories: reference table with additional product category information.\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"## Library Imports\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 1,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"import pyspark\\n\",\n",
					"        \"from pyspark.sql import functions as F\\n\",\n",
					"        \"from pyspark.sql.functions import *\\n\",\n",
					"        \"from pyspark.sql import *\\n\",\n",
					"        \"from pyspark.sql.types import *\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"## Read in Data from Delta Lake\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": null,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"data_lake_account_name = ''\\n\",\n",
					"        \"file_system_name = ''\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 2,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"paths = [f'abfss://{file_system_name}@{data_lake_account_name}.dfs.core.windows.net/transformed_data/cleaned_data_electronics']\\n\",\n",
					"        \"full_dataset = spark.read.format(\\\"delta\\\").load(*paths)\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 4,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# add month & year, re-order columns\\n\",\n",
					"        \"cleaned_df = full_dataset.withColumn('month', month('event_time')) \\\\\\n\",\n",
					"        \"    .withColumn('year', year('event_time')) \\\\\\n\",\n",
					"        \"    .drop('category_code') \\\\\\n\",\n",
					"        \"    .select('user_id', 'year', 'month', 'event_type', 'product_id', 'category_id', 'category', 'subcategory', 'brand', 'price', 'user_session', 'event_time')\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 5,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# write cleaned_df table to an intermediate spark table\\n\",\n",
					"        \"cleaned_df.write.format(\\\"delta\\\").mode(\\\"overwrite\\\").save(f\\\"abfss://{file_system_name}@{data_lake_account_name}.dfs.core.windows.net/intermediate_tables/cleaned_df\\\")\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 2,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# read cleaned_df table from intermediate spark table\\n\",\n",
					"        \"cleaned_df = spark.read.format(\\\"delta\\\").load(f\\\"abfss://{file_system_name}@{data_lake_account_name}.dfs.core.windows.net/intermediate_tables/cleaned_df\\\")\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"## Data Modeling\\n\",\n",
					"        \"\\n\",\n",
					"        \"Transform data to create four tables for reporting, each with a unique identifier (UID, product_id, or category_id) to be linked in Power BI.\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"### Customer Table\\n\",\n",
					"        \"\\n\",\n",
					"        \"**Growth indicator:** Classify customers as growth or no growth based on month-over-month change in net revenue.\\n\",\n",
					"        \"\\n\",\n",
					"        \"1. Growth if >10% net revenue increase\\n\",\n",
					"        \"1. No growth if >10% net revenue decrease\\n\",\n",
					"        \"1. No change if in between\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 3,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {\n",
					"        \"diagram\": {\n",
					"          \"activateDiagramType\": 1,\n",
					"          \"chartConfig\": {\n",
					"            \"category\": \"bar\",\n",
					"            \"keys\": [\n",
					"              \"user_id\"\n",
					"            ],\n",
					"            \"values\": [\n",
					"              \"year\"\n",
					"            ],\n",
					"            \"yLabel\": \"year\",\n",
					"            \"xLabel\": \"user_id\",\n",
					"            \"aggregation\": \"SUM\",\n",
					"            \"aggByBackend\": false\n",
					"          },\n",
					"          \"aggData\": \"{\\\"year\\\":{\\\"101875240\\\":2020,\\\"107620212\\\":2020,\\\"128968633\\\":2019,\\\"136662675\\\":2019,\\\"145611266\\\":2019}}\",\n",
					"          \"isSummary\": false,\n",
					"          \"previewData\": {\n",
					"            \"filter\": null\n",
					"          },\n",
					"          \"isSql\": false\n",
					"        }\n",
					"      },\n",
					"      \"source\": [\n",
					"        \"# get monthly revenue\\n\",\n",
					"        \"growth = cleaned_df.filter(col('event_type') == 'purchase') \\\\\\n\",\n",
					"        \"    .withColumn('revenue', cleaned_df['price'].cast('double'))\\\\\\n\",\n",
					"        \"    .groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .sum('revenue') \\\\\\n\",\n",
					"        \"    .withColumnRenamed('sum(revenue)', 'total_net_revenue') \\\\\\n\",\n",
					"        \"    .orderBy('user_id', 'year', 'month')\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 4,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {\n",
					"        \"diagram\": {\n",
					"          \"activateDiagramType\": 1,\n",
					"          \"chartConfig\": {\n",
					"            \"category\": \"bar\",\n",
					"            \"keys\": [\n",
					"              \"user_id\"\n",
					"            ],\n",
					"            \"values\": [\n",
					"              \"year\"\n",
					"            ],\n",
					"            \"yLabel\": \"year\",\n",
					"            \"xLabel\": \"user_id\",\n",
					"            \"aggregation\": \"SUM\",\n",
					"            \"aggByBackend\": false\n",
					"          },\n",
					"          \"aggData\": \"{\\\"year\\\":{\\\"430640726\\\":2020,\\\"436540545\\\":2020,\\\"461023190\\\":2019,\\\"476777607\\\":4039}}\",\n",
					"          \"isSummary\": false,\n",
					"          \"previewData\": {\n",
					"            \"filter\": null\n",
					"          },\n",
					"          \"isSql\": false\n",
					"        }\n",
					"      },\n",
					"      \"source\": [\n",
					"        \"# get deltas for previous month\\n\",\n",
					"        \"from pyspark.sql.window import Window\\n\",\n",
					"        \"from pyspark.sql.functions import lag\\n\",\n",
					"        \"\\n\",\n",
					"        \"window_specs = Window.partitionBy('user_id').orderBy('user_id', 'year', 'month')\\n\",\n",
					"        \"\\n\",\n",
					"        \"growth_lag = growth.withColumn('last_month_revenue', lag(growth.total_net_revenue).over(window_specs).cast('double'))\\n\",\n",
					"        \"growth_delta = growth_lag.withColumn('delta_net_revenue', (growth_lag.total_net_revenue - growth_lag.last_month_revenue).cast('double'))\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 5,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# identify growth vs. no growth customers\\n\",\n",
					"        \"# growth defined as +/-10% revenue month-over-month\\n\",\n",
					"        \"\\n\",\n",
					"        \"df_growth_a = growth_delta.withColumn('percent_delta_revenue', growth_delta['delta_net_revenue']/growth_delta['last_month_revenue'].cast('double'))\\n\",\n",
					"        \"df_growth = df_growth_a.withColumn('growth', \\n\",\n",
					"        \"        when(df_growth_a['percent_delta_revenue'] > .1, 'growth')\\n\",\n",
					"        \"        .when(df_growth_a['percent_delta_revenue'] < -.1, 'decline')\\n\",\n",
					"        \"        .otherwise('no change')) \\\\\\n\",\n",
					"        \"        .drop('last_month_revenue', 'delta_net_revenue') \\\\\\n\",\n",
					"        \"        .filter(col('growth').isNotNull())\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"**Session & buying behavior:** Calculated on a per user, per month basis.\\n\",\n",
					"        \"\\n\",\n",
					"        \"* Number of sessions\\n\",\n",
					"        \"* Average session duration\\n\",\n",
					"        \"* Average conversion rate\\n\",\n",
					"        \"* Average order value\\n\",\n",
					"        \"* Average cart abandon rate\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 6,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# sessions per user\\n\",\n",
					"        \"sessions_per_user_per_month = cleaned_df.groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .agg(countDistinct('user_session').alias('sessions_per_user_per_month')) \\\\\\n\",\n",
					"        \"    .fillna({'sessions_per_user_per_month': 0}) \\\\\\n\",\n",
					"        \"    .orderBy('user_id', 'year', 'month')\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 7,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# avg session duration\\n\",\n",
					"        \"# time between start & end of each session, aggregated per user per month\\n\",\n",
					"        \"session_durations = cleaned_df.groupBy('user_id', 'year', 'month', 'user_session') \\\\\\n\",\n",
					"        \"    .agg(\\n\",\n",
					"        \"        unix_timestamp(min('event_time')).alias('session_start_time'),\\n\",\n",
					"        \"        unix_timestamp(max('event_time')).alias('session_end_time')) \\\\\\n\",\n",
					"        \"    .withColumn('session_duration', col('session_end_time')-col('session_start_time')) \\\\\\n\",\n",
					"        \"    .drop('user_session', 'session_start_time', 'session_end_time')\\n\",\n",
					"        \"\\n\",\n",
					"        \"avg_session_duration_per_user_per_month = session_durations.groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .agg(mean('session_duration').cast('double').alias('avg_session_duration_per_user_per_month')) \\\\\\n\",\n",
					"        \"    .orderBy('user_id', 'year', 'month')\\n\",\n",
					"        \"\\n\",\n",
					"        \"#avg_session_duration_per_user_per_month.orderBy(desc('avg_session_duration_per_user_per_month')).show(5)\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 8,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# avg conversion rate\\n\",\n",
					"        \"# avg # purchases / # views per user per month\\n\",\n",
					"        \"avg_conversion_rate_per_user_per_month = cleaned_df.groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .agg(\\n\",\n",
					"        \"        count(when(col('event_type') == 'view', True)).alias('num_views'),\\n\",\n",
					"        \"        count(when(col('event_type') == 'purchase', True)).alias('num_purchases')) \\\\\\n\",\n",
					"        \"    .fillna({'num_views': 0, 'num_purchases': 0}) \\\\\\n\",\n",
					"        \"    .withColumn('avg_conversion_rate_per_user_per_month', (col('num_purchases')/col('num_views')).cast('double')) \\\\\\n\",\n",
					"        \"    .drop('num_views', 'num_purchases') \\\\\\n\",\n",
					"        \"    .orderBy('user_id', 'year', 'month')\\n\",\n",
					"        \"\\n\",\n",
					"        \"#avg_conversion_rate_per_user_per_month.orderBy(desc('avg_conversion_rate_per_user_per_month')).show(5)\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 9,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# avg order value\\n\",\n",
					"        \"# price per user per month, for purchases only\\n\",\n",
					"        \"avg_order_value_per_user_per_month = cleaned_df.filter(col('event_type') == 'purchase') \\\\\\n\",\n",
					"        \"    .groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .agg(mean('price').cast('double').alias('avg_order_value_per_user_per_month')) \\\\\\n\",\n",
					"        \"    .orderBy('user_id', 'year', 'month')\\n\",\n",
					"        \"\\n\",\n",
					"        \"#avg_order_value_per_user_per_month.show(5)\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 10,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# avg_cart_abandon_rate\\n\",\n",
					"        \"# items that were added to cart, but not purchased\\n\",\n",
					"        \"abandon_rate_per_session = cleaned_df.filter((col('event_type') == 'purchase') | (col('event_type') == 'cart')) \\\\\\n\",\n",
					"        \"    .groupBy('user_id', 'year', 'month', 'user_session', 'product_id') \\\\\\n\",\n",
					"        \"    .pivot('event_type').agg(count('product_id')) \\\\\\n\",\n",
					"        \"    .fillna({'cart':0, 'purchase':0}) \\\\\\n\",\n",
					"        \"    .withColumn('cart_abandon_rate', (col('cart')-col('purchase'))/col('cart'))\\n\",\n",
					"        \"\\n\",\n",
					"        \"avg_cart_abandon_rate = abandon_rate_per_session.groupBy('user_id', 'year', 'month') \\\\\\n\",\n",
					"        \"    .agg(mean('cart_abandon_rate').cast('double').alias('avg_cart_abandon_rate'))\\n\",\n",
					"        \"\\n\",\n",
					"        \"#avg_cart_abandon_rate.show(5)\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"**Join all Customer DataFrames**\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 11,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# join customer dfs\\n\",\n",
					"        \"def join_dfs (df_list):\\n\",\n",
					"        \"    joined_df = df_growth\\n\",\n",
					"        \"    for l in df_list:\\n\",\n",
					"        \"        joined_df = joined_df.join(l, ['user_id', 'year', 'month'], how='left')\\n\",\n",
					"        \"    return joined_df\\n\",\n",
					"        \"\\n\",\n",
					"        \"customers_joined = join_dfs([sessions_per_user_per_month, \\\\\\n\",\n",
					"        \"    avg_session_duration_per_user_per_month, \\\\\\n\",\n",
					"        \"    avg_conversion_rate_per_user_per_month, \\\\\\n\",\n",
					"        \"    avg_order_value_per_user_per_month, \\\\\\n\",\n",
					"        \"    avg_cart_abandon_rate])\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 12,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# add unique identifier\\n\",\n",
					"        \"customers = customers_joined.withColumn('UID', concat(customers_joined['user_id'], lit('-'), customers_joined['year'], lit('-'), customers_joined['month']))\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"### Clickstream Activity Table\\n\",\n",
					"        \"\\n\",\n",
					"        \"A transaction table that lists each clickstream event, including product views, add to cart, and purchases.\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 13,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"# filter to only rows where 'growth' is applicable, i.e. rows in customer table\\n\",\n",
					"        \"activity = cleaned_df.withColumn('UID', concat(cleaned_df['user_id'], lit('-'), cleaned_df['year'], lit('-'), cleaned_df['month'])) \\\\\\n\",\n",
					"        \"    .join(customers, ['UID'], how='right') \\\\\\n\",\n",
					"        \"    .select('UID', 'event_type', 'product_id')\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"### Products Table\\n\",\n",
					"        \"\\n\",\n",
					"        \"A reference table with additional product information.\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 14,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"products = cleaned_df.select('product_id', 'brand', 'price', 'category_id').dropDuplicates(['product_id'])\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"### Categories Table\\n\",\n",
					"        \"\\n\",\n",
					"        \"A reference table with additional product category information.\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 15,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"categories = cleaned_df.select('category_id', 'category', 'subcategory').dropDuplicates(['category_id'])\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"markdown\",\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"## Save Tables to Data Lake\\n\",\n",
					"        \"\\n\",\n",
					"        \"Persist the four tables to CSV files in the Data Lake for reporting.\\n\",\n",
					"        \"\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    },\n",
					"    {\n",
					"      \"cell_type\": \"code\",\n",
					"      \"execution_count\": 16,\n",
					"      \"outputs\": [],\n",
					"      \"metadata\": {},\n",
					"      \"source\": [\n",
					"        \"save_path = f'abfss://{file_system_name}@{data_lake_account_name}.dfs.core.windows.net/reporting/'\\n\",\n",
					"        \"\\n\",\n",
					"        \"customers.coalesce(1).write.option('header', 'true').mode('overwrite').option(\\\"overwriteSchema\\\", \\\"true\\\").csv(save_path+'customers')\\n\",\n",
					"        \"activity.write.option('header', 'true').mode('overwrite').option(\\\"overwriteSchema\\\", \\\"true\\\").csv(save_path+'activity')\\n\",\n",
					"        \"products.coalesce(1).write.option('header', 'true').option(\\\"overwriteSchema\\\", \\\"true\\\").mode('overwrite').csv(save_path+'products')\\n\",\n",
					"        \"categories.coalesce(1).write.option('header', 'true').option(\\\"overwriteSchema\\\", \\\"true\\\").mode('overwrite').csv(save_path+'categories')\"\n",
					"      ],\n",
					"      \"attachments\": {}\n",
					"    }\n",
					"  ]\n",
					"}"
				],
				"execution_count": null
			}
		]
	}
}